/*
 * Copyright (c) 2023 ZitaoTech
 * "BlueBerry" Android Layout by Drexel Macintosh    
 * SPDX-License-Identifier: MIT
 */

#include "keys_cs_qwerty.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp CS_Z_CARON &kp CS_U_RING &kp CS_S_CARON &kp CS_R_CARON &kp CS_E_CARON &kp CS_C_CARON &kp CS_Y_ACUTE &kp CS_U_ACUTE &kp CS_I_ACUTE &kp CS_E_ACUTE &kp CS_A_ACUTE &kp CS_CARON &kp CS_ACUTE
            >;
        };
    };
};

#define ALT 1
#define UPPER 2
#define MEDIA 3

// Standard Behavior Configurations:

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk { release-after-ms = <2500>; };

&sl { release-after-ms = <2500>; };

&gresc {
    bindings = <&mkp LCLK>, <&mt PAGE_UP PAGE_DOWN>;

    mods = <(MOD_LSFT|MOD_RSFT)>;
};

/ {
    //Behaviors Start Here:

    behaviors {
        // Tap Dance Behaviors

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mkp LCLK>, <&gresc>;
        };

        ALTL: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sl ALT>, <&to ALT>;
        };

        SHFT: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LSHFT>, <&kp CLCK>;
        };

        MED: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&to 0>, <&to MEDIA>;
        };

        MAN: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&to 0>, <&to UPPER>;
        };

        EALT: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LALT>, <&kp LALT>;
        };

        ECTRL: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LCTRL>, <&kp LC(SPACE)>;
        };

        EMU: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&to 0>, <&to MEDIA>;
        };

        // Macro Behaviors

        tap: tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        glo: globe_pseudo_mod {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp GLOBE &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp GLOBE>;
        };

        // Hold Tap Behaviors

        KPM: behavior_KPM {
            compatible = "zmk,behavior-hold-tap";
            label = "KPM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            bindings = <&msc>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            bindings = <&out &kp>;
        };

        hm2: homerow_mods_2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            bindings = <&ext_power &kp>;
        };

        mtt: mod_tap_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <125>;
            bindings = <&tap>, <&tap>;
        };

        msk: mod_Stick_Pre {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <125>;
            bindings = <&sk>, <&kp>;
        };

        alt_to: behavior_alt_to {
            compatible = "zmk,behavior-hold-tap";
            label = "alt_to";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            bindings = <&kp>, <&to>;
        };

        glb: mod_tap_glo {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&glo>;
        };

        mmTabVyp: TabMenu_SwitchOffKBDmouse {
            compatible = "zmk,behavior-mod-morph";
            label = "mod morph Tab_and_Menu plus Switchoffs";
            bindings = <&mtt K_APP TAB>, <&hm2 EP_TOG K_COFFEE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmBHUR: BackHome_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "Mod Morph Back button";
            bindings = <&mtt LG(RETURN) K_BACK>, <&mtt LC(LS(Z)) LC(Z)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT|MOD_RSFT)>;
        };

        mmSKP: SwiftKeySwipe_PrtScr {
            compatible = "zmk,behavior-mod-morph";
            label = "mod morph SwiftKey and PrintScreen";
            bindings =
                <&mtt LC(RA(NUMBER_3)) LC(RA(NUMBER_1))>,
                <&kp PRINTSCREEN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //End Behvaiors here
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none              &none
&sk RIGHT_ALT      &ALTL              &gresc             &mmBHUR            &mmTabVyp
&mtt LS(Q) Q       &mtt CS_E_CARON W  &mtt CS_E_ACUTE E  &mtt CS_R_CARON R  &mtt CS_CARON T  &mtt CS_Y_ACUTE Y    &mtt CS_U_RING U   &mtt CS_I_ACUTE I  &mtt CS_ACUTE O  &mtt LS(P) P
&mtt CS_A_ACUTE A  &mtt CS_S_CARON S  &mtt CS_CARON D    &mtt LS(F) F       &mtt LS(G) G     &mtt LS(H) H         &mtt CS_U_ACUTE J  &mtt CS_ACUTE K    &mtt CS_CARON L  &kp BSPC
&ALTL              &mtt CS_Z_CARON Z  &mtt LS(X) X       &mtt CS_C_CARON C  &mtt LS(V) V     &mtt LS(B) B         &mtt CS_CARON N    &mtt LS(M) M       &kp DELETE       &kp ENTER
                                      &SHFT                                 &mmSKP           &kp SPACE            &sk LCTRL          &SHFT
            >;
        };

        alt_layer {
            bindings = <
&none                       &none
&sk RIGHT_ALT               &MAN             &gresc           &mmBHUR           &mmTabVyp
&mtt CS_PERCENT CS_HASH     &mtt HOME CS_N1  &mtt UP CS_N2    &mtt PG_UP CS_N3  &mtt CS_LBKT CS_LPAR        &mtt CS_RBKT CS_RPAR     &mtt CS_LT CS_UNDER         &mtt CS_GT CS_MINUS          &mtt CS_EQUAL CS_PLUS            &mtt CS_AMPS CS_AT
&mtt CS_DEGREE CS_ASTERISK  &mtt LEFT CS_N4  &mtt DOWN CS_N5  &mtt RIGHT CS_N6  &mtt CS_BACKSLASH CS_SLASH  &mtt CS_PIPE CS_COLON    &mtt CS_LEFT_BRACE CS_SEMI  &mtt CS_RIGHT_BRACE CS_APOS  &mtt CS_UMLAUT CS_DOUBLE_QUOTES  &mtt DEL BSPC
&to 0                       &mtt END CS_N7   &mtt DOWN CS_N8  &mtt PG_DN CS_N9  &mtt CS_SECTION CS_QMARK    &mtt CS_TILDE CS_EXCL    &mtt CS_GRAVE CS_COMMA      &mtt CS_CARET CS_DOT         &mtt CS_EURO CS_DOLLAR           &kp ENTER
                                             &SHFT                              &mtt LEFT_GUI CS_N0         &kp SPACE                &sk LCTRL                   &SHFT
            >;
        };

        upper_layer {
            bindings = <
&none      &none
&mkp LCLK  &mkp RCLK  &mkp MCLK  &mkp MB4  &mkp MB5
&kp Q      &kp W      &kp E      &kp R     &kp T                    &kp Y        &kp U  &kp I      &kp O     &kp P
&kp A      &kp S      &kp D      &kp F     &kp G                    &kp H        &kp J  &kp K      &kp L     &kp BSPC
&EMU       &kp Z      &kp X      &kp C     &kp V                    &kp B        &kp N  &kp M      &kp DLLR  &kp ENTER
                      &SHFT                &msk LEFT_GUI LG(SPACE)  &kp SPACE    &EALT  &sk LCTRL
            >;
        };

        media_layer {
            bindings = <
&none         &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR  &bt BT_SEL 2  &bt BT_SEL 3
&none         &none         &none       &sys_reset    &ext_power EP_TOG  &none           &none       &none  &none        &none
&none         &none         &none       &none         &none              &none           &none       &none  &none        &none
&to 0         &none         &none       &none         &bl BL_DEC         &bl BL_TOG      &bl BL_INC  &none  &bootloader  &none
                            &to 0                     &none              &out OUT_TOG    &none       &none
            >;
        };
    };
};
